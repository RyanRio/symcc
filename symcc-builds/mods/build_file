#!/usr/bin/env python3

import subprocess
import sys
import yaml
import os
import shutil
import argparse

_environ = os.environ.copy()

# parse args
parser = argparse.ArgumentParser()
parser.add_argument("files", nargs='*', help="run with given inputs")
parser.add_argument("-c", dest="clean", action='store_true', help="clean directory structure")
parser.add_argument("--arch", dest="arch", choices=["32", "64"], default="BOTH", help="optionally build just 32 bit or 64 bit")
parser.add_argument("--runtime", dest="runtime", choices=["z3", "qsym"], default="qsym", help="build with the z3 runtime backend or the qsym runtime backend")

args = parser.parse_args()

arch = args.arch
runtime = args.runtime

# set up directories
top_dir = os.getcwd()
custom_programs_dir = os.path.join(top_dir, "custom_programs")
result_dir = os.path.join(custom_programs_dir, "results")

programs32 = os.path.join(top_dir, "programs32")
programs64 = os.path.join(top_dir, "programs64")
programs32_build = os.path.join(top_dir, "programs32_build")
programs64_build = os.path.join(top_dir, "programs64_build")

if args.clean:
    shutil.rmtree(programs32_build)
    os.mkdir(programs32_build)
    shutil.rmtree(programs64_build)
    os.mkdir(programs64_build)
    exit(0)

# set up builds
supported_programs = ["simple.c", "hash.c"]

# how to run the executable
executable_mapping = {
    "simple.c": "simple",
    "hash.c": "hash"
}

input_file_mapping = {
    "hash": "hash_inputs",
    "simple": "simple_inputs"
}

# get the runtime directory given a certain architecture
def getRuntimeDir(arch):
    parent = os.path.dirname(top_dir)
    return os.path.join(parent, f"{runtime}-build-{arch}")

def build_inputs(executable):
    if executable in input_file_mapping:
        input_dir = os.path.join(top_dir, "custom_programs", input_file_mapping[executable])
        return [os.path.join(input_dir, f) for f in os.listdir(input_dir)]
    else:
        print("no input files exist for executable")
        exit(1)

def build_cmd(filename, executable):
    with open(filename, "r") as f:
        line = f.readline()
        return ' '.join(["echo", line[:-1], "|", f"./{executable}", str(len(line) - 1)])
    # return ' '.join([f"./{executable}", filename])

def build(runtime):
    #symcc build
    runtime_dir = getRuntimeDir(runtime)
    CC = os.path.join(runtime_dir, "symcc")
    CXX = os.path.join(runtime_dir, "sym++")
    CFLAGS = "-m32 -w -g" if runtime == "32" else "-g"
    os.environ["CC"] = CC
    os.environ["CXX"] = CXX
    os.environ["CCFLAGS"] = CFLAGS
    os.environ["CFLAGS"] = CFLAGS
    os.environ["SYMCC_NO_SYMBOLIC_INPUT"] = "1"
    os.environ["SYMCC_LOG_FILE"] = os.path.join(custom_programs_dir, "log.txt")

    print(CC)

    program_list = filter(lambda x: x in supported_programs, args.files)

    # programs
    for program in program_list:
        base_executable = executable_mapping[program]
        executable = f"custom_programs/{base_executable}"
        BUILD_OPTIONS = [CC, f"custom_programs/{program}", "-o", executable]
        result = subprocess.run(BUILD_OPTIONS, env=os.environ)

        if result.returncode == 0:
            inputs = build_inputs(base_executable)
            print(inputs)
            os.environ["SYMCC_NO_SYMBOLIC_INPUT"] = "0"
            os.environ["SYMCC_OUTPUT_DIR"] = result_dir
            for inp in inputs:
                subprocess.run(build_cmd(inp, executable), shell=True, env=os.environ)
        else:
            exit(result.returncode)

if arch == "BOTH":
    build("32")
    build("64")
else:
    build(arch)

os.environ.clear()
os.environ.update(_environ)
